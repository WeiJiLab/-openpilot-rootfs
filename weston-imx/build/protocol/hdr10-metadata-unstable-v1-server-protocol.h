/* Generated by wayland-scanner 1.18.0 */

#ifndef HDR10_METADATA_UNSTABLE_V1_SERVER_PROTOCOL_H
#define HDR10_METADATA_UNSTABLE_V1_SERVER_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-server.h"

#ifdef  __cplusplus
extern "C" {
#endif

struct wl_client;
struct wl_resource;

/**
 * @page page_hdr10_metadata_unstable_v1 The hdr10_metadata_unstable_v1 protocol
 * Protocol for sending hdr10 metadata to compositor
 *
 * @section page_desc_hdr10_metadata_unstable_v1 Description
 *
 * This protocol specifies a set of interfaces used to set and control
 * hdr10 metadata of video contents.
 *
 * Warning! The protocol described in this file is experimental and backward
 * incompatible changes may be made. Backward compatible changes may be added
 * together with the corresponding interface version bump. Backward
 * incompatible changes are done by bumping the version number in the protocol
 * and interface names and resetting the interface version. Once the protocol
 * is to be declared stable, the 'z' prefix and the version number in the
 * protocol and interface names are removed and the interface version number is
 * reset.
 *
 * @section page_ifaces_hdr10_metadata_unstable_v1 Interfaces
 * - @subpage page_iface_zwp_hdr10_metadata_v1 - hdr10_metadata
 * @section page_copyright_hdr10_metadata_unstable_v1 Copyright
 * <pre>
 *
 * Copyright 2018 NXP
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 * </pre>
 */
struct zwp_hdr10_metadata_v1;

/**
 * @page page_iface_zwp_hdr10_metadata_v1 zwp_hdr10_metadata_v1
 * @section page_iface_zwp_hdr10_metadata_v1_desc Description
 *
 * The global interface exposing hdr10 metadata capabilities is
 * used to instantiate an interface extension for compositor.
 * This extended interface will then allow the client to pass hdr10 metadata
 * to compositor and send to display driver if supported.
 * @section page_iface_zwp_hdr10_metadata_v1_api API
 * See @ref iface_zwp_hdr10_metadata_v1.
 */
/**
 * @defgroup iface_zwp_hdr10_metadata_v1 The zwp_hdr10_metadata_v1 interface
 *
 * The global interface exposing hdr10 metadata capabilities is
 * used to instantiate an interface extension for compositor.
 * This extended interface will then allow the client to pass hdr10 metadata
 * to compositor and send to display driver if supported.
 */
extern const struct wl_interface zwp_hdr10_metadata_v1_interface;

#ifndef ZWP_HDR10_METADATA_V1_ERROR_ENUM
#define ZWP_HDR10_METADATA_V1_ERROR_ENUM
enum zwp_hdr10_metadata_v1_error {
	/**
	 * error occurs when compositor handle metadata
	 */
	ZWP_HDR10_METADATA_V1_ERROR_SENDING_META_ERROR = 0,
};
#endif /* ZWP_HDR10_METADATA_V1_ERROR_ENUM */

/**
 * @ingroup iface_zwp_hdr10_metadata_v1
 * @struct zwp_hdr10_metadata_v1_interface
 */
struct zwp_hdr10_metadata_v1_interface {
	/**
	 * unbind from the hdr10 metadata interface
	 *
	 * Informs the server that the client will not be using this
	 * protocol object anymore. This does not affect any other objects.
	 */
	void (*destroy)(struct wl_client *client,
			struct wl_resource *resource);
	/**
	 * interface of setting and controling hdr10 metadata
	 *
	 * client can use this interface pass hdr10 metadata to server.
	 * Server need use the recived metadata to enable hdr mode.
	 * @param eotf supported eotf
	 * @param type supported type
	 * @param display_primaries_red display primaries of red, high 16bits for x, and low 16bits for y
	 * @param display_primaries_green display primaries of green, high 16bits for x, and low 16bits for y
	 * @param display_primaries_blue display primaries of blue, high 16bits for x, and low 16bits for y
	 * @param white_point white point, high 16bits for x, and low 16bits for blue
	 * @param mastering_display_luminance max and min mastering display luminance, high 16 bits for max, and low 16 bits for min
	 * @param max_cll max content light level
	 * @param max_fall max frame average light level
	 */
	void (*set_metadata)(struct wl_client *client,
			     struct wl_resource *resource,
			     uint32_t eotf,
			     uint32_t type,
			     uint32_t display_primaries_red,
			     uint32_t display_primaries_green,
			     uint32_t display_primaries_blue,
			     uint32_t white_point,
			     uint32_t mastering_display_luminance,
			     uint32_t max_cll,
			     uint32_t max_fall);
};


/**
 * @ingroup iface_zwp_hdr10_metadata_v1
 */
#define ZWP_HDR10_METADATA_V1_DESTROY_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_hdr10_metadata_v1
 */
#define ZWP_HDR10_METADATA_V1_SET_METADATA_SINCE_VERSION 1

#ifdef  __cplusplus
}
#endif

#endif
